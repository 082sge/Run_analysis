makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {}
set.seed(1)
rpois(5, 2)
librtary(swirl)
library(swirl)
swirl()
ls(plants)
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
hea()
head()
head(x)
head(plants)
head(plant, 10)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4,
| replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
sample(LETTERS)
sample(LETTERS, 26)
LETTERS
sample(LETTERS)
sample(100, c(0,1), c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
dat(cars)
data(cars)
?cars
hed(cars)
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(swirl)
ls()
rm(list = ls())
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
?read,csv
?read.csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, correct_size = size + 1000)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl1, destfile = "./Dataset/Quiz1-01.csv", method = "curl")
sum(quiz1Data$VAL == 24, na.rm = TRUE)
library(dplyr)
chicago <- readRDS("chicago.rds")
options(width = 105)
chicago <- readRDS("chicago.rds")
install.packages("dplyr")
dim(ch)
chicago <- readRDS("chicago.rds")
library(dplyr)
chicago <- readRDS("chicago.rds")
install.packages("swirl")
library(swirl)
swirl()
swirl()
library(dplyr)
install.packages()
install.packages("Getting and cleaning data")
swirl::install_course("Getting and Cleaning Data")
Manual Installation
swirl::install_course("Getting and Cleaning Data")
library(swirl)
swirl()
read.csv(path2csv)
?read.csv
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(-(5:20))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country ==
| "US" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran, package)
by_package
package mean(size)
summarize(by_package, mean(size))
pack_sum
?n
?n_distinct
submit()
?n
?n_distinct
submit()
?n
?n_distinct
submit()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
source('C:/Users/Sge/AppData/Local/Temp/Rtmpqu9QHg/summarize1.R')
sumbit()
pack_sum
?n
?n_distinct
submit()
pack_sum <- summarise(by_package, count = , unique = , countries = , avg_bytes = )
pack_sum <- summarise(by_package, count = n() , unique = n_distinct(ip_id), countries = n_distinct(country), avg_bytes = mean(size))
?n
?n_distinct
submit()
pack_sum <- summarise(by_package, count = n(), unique = n_distinct(ip_id), countries = n_distinct(country), avg_bytes = mean(size))
> ?n
> ?n_distinct
> submit()
reset()
swirl()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country)
avg_bytes = mean(size))
pack_sum <- summarize(by_package,)
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
?n
?n_distinct
submit()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
?n
?n_distinct
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
submit()
View(result3)
script_vals_identical()
cran %>%
select(ip_id, country, package, size) %>%
print
NULL
cran %>%
select(ip_id %>% country %>% package %>% size) %>%
print
cran %>%
select(unique, countries, by_package, avg_bytes) %>%
print
cran %>%
eval_select(unique, countries, by_package, avg_bytes) %>%
print
cran %>%
eval_select <- select(unique, countries, by_package, avg_bytes) %>%
print
cran %>%
select(unique, countries, by_package, avg_bytes)
print
rlang::last_error()
rlang::last_trace()
cran %>%
select.data.frame(., unique, countries, by_package, avg_bytes)
print
cran %>%
select(., unique, countries, by_package, avg_bytes)%>%
print
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb & lt = 0.5) %>%
arrange(desc(size_mb))
print
cran %&gt;%
select(ip_id, country, package, size) %&gt;%
mutate(size_mb = size / 2^20) %&gt;%
filter(size_mb & lt = 0.5) %&gt;%
arrange(desc(size_mb))
print
cran %&gt;%
select(ip_id, country, package, size) %&gt;%
print
cran %>%
select(ip_id, country, package, size) %>%
print
cran %>%
select(ip_id, country, package, size)
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
print()
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
print()
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
arrange(desc(size_mb))
print()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
arrange(desc(size_mb))
print
submit()
print()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
arrange(desc(size_mb)) %>%
print
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
students2 %>%
gather(sex_class, count, -grade) %>%
separate(col=sex_class, c("sex", "class")) %>%
print
submit()
students3
# the five possible classes, there are lots of missing
# values (i.e. NAs). Use the argument na.rm = TRUE
# to omit these values from the final result.
#
# Remember that when you're using the %>% operator,
# the value to the left of it gets inserted as the
# first argument to the function on the right.
#
# Consult ?gather and/or ?chain if you get stuck.
#
students3 %>%
gather(class ,grade , class1 : class5, rm.na = TRUE) %>%
print
students3 %>%
gather(class ,grade , class1:class5, rm.na = TRUE) %>%
print
students3 %>%
gather(class, grade, class1:class5, rm.na = TRUE) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
print
submit()
?spread
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade ) %>%
print
submit()
library(readr)
parse_number("class5")
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class=extract_numeric(class)) %>%
print
submit()
students4
student_info <- students4 %>%
select(id, name, sex) %>%
print
submit()
student_info <- students4 %>%
select(id, name, sex) %>%
unique() %>%
print
submit()
gradebook <- students4 %>%
select(id, class, midterm, final)
print
gradebook <- students4 %>%
select(id, class, midterm, final) %>%
print
submit()
passed
failed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
packageVersion('dplyr')
bind_rows(passed, failed)
sat
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(col=part_sex, c("part", "sex") %>%
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(col = part_sex, c("part", "sex")) %>%
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
prin
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
print
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex) %>%
mutate(total = sum(count),
prop = count / total) %>%
print
submit()
setwd("C:/Users/Sge/Desktop/Coursera")
if(!file.exists("UCI HAR Dataset")) {
dir.create("UCI HAR Dataset")
if(!file.exists("UCI HAR Dataset")) {
dir.create("UCI HAR Dataset")
}
filename <- "Coursera_Assignment3_Final.zip"
# Checking if archieve already exists.
if (!file.exists(filename)){
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL, filename, method="curl")
}
# Checking if folder exists
if (!file.exists("UCI HAR Dataset")) {
unzip(filename)
}
if(!file.exists("UCI HAR Dataset") {
dir.create("UCI HAR Dataset")
}
